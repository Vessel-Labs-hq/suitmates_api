// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                       Int                  @id @default(autoincrement())
  email                    String               @unique
  first_name               String?
  password                 String?
  last_name                String?
  phone_number             String?
  avatar                   String?
  bio                      String?
  stripe_customer_id       String?
  stripe_payment_method_id String?
  card_last_digit          String?
  card_name                String?
  invited_by               Int?
  role                     String               @default("owner") // 'tenant' or 'owner'
  space                    Space? // an owner must have one space
  suite                    Suite? // a tenant can have a suite
  businesses               Business[]
  maintenance_requests     MaintenanceRequest[]
  comments                 Comment[]
  notifications            Notification[]
  documents                UserDocument[]
  onboarded                Boolean              @default(false)
  verified                 Boolean              @default(false)
  created_at               DateTime             @default(now())
  updated_at               DateTime             @updatedAt
  deleted                  DateTime?
}

model Space {
  id              Int       @id @default(autoincrement())
  owner           User?     @relation(fields: [owner_id], references: [id])
  owner_id        Int?      @unique // the owner of the suite
  suite           Suite[]
  space_name      String
  space_address   String
  space_size      Int
  space_amenities String
  account_number  String?
  account_name    String?
  routing_number  String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted         DateTime?
}

model Suite {
  id                   Int                  @id @default(autoincrement())
  suite_number         String
  suite_type           String
  suite_size           String
  suite_cost           Int
  timing               String
  maintenance_requests MaintenanceRequest[]
  tenant_id            Int?                 @unique
  tenant               User?                @relation(fields: [tenant_id], references: [id])
  space_id             Int
  space                Space                @relation(fields: [space_id], references: [id])
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  deleted              DateTime?
}

model UserDocument {
  id      Int    @id @default(autoincrement())
  url     String
  user_id Int
  user    User   @relation(fields: [user_id], references: [id])
}

model Business {
  id                      Int      @id @default(autoincrement())
  business_name           String
  days_of_business        String
  occupation              String
  hours_of_business_open  String
  hours_of_business_close String
  website                 String
  license                 String
  user_id                 Int
  user                    User     @relation(fields: [user_id], references: [id])
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
}

model MaintenanceImages {
  id                     Int                @id @default(autoincrement())
  url                    String
  maintenance_request_id Int
  maintenance_request    MaintenanceRequest @relation(fields: [maintenance_request_id], references: [id])
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
}

model MaintenanceRequest {
  id          Int                 @id @default(autoincrement())
  user_id     Int
  user        User                @relation(fields: [user_id], references: [id])
  suite_id    Int
  suite       Suite               @relation(fields: [suite_id], references: [id])
  priority    String
  description String
  repair_date String?
  repair_time String?
  status      Status              @default(PENDING)
  images      MaintenanceImages[]
  comments    Comment[]
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
}

model Comment {
  id                     Int                @id @default(autoincrement())
  text                   String
  user_id                Int
  user                   User               @relation(fields: [user_id], references: [id])
  maintenance_request_id Int
  maintenance_request    MaintenanceRequest @relation(fields: [maintenance_request_id], references: [id])
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
}

model Notification {
  id         Int      @id @default(autoincrement())
  text       String
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  opened     Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}
